---
import { Badge, Icon } from '@astrojs/starlight/components'
import { AstroError } from 'astro/errors'
import type { ComponentProps } from 'astro/types'
import { getRelativeLocaleUrl } from 'astro:i18n'
import starlightConfig from 'virtual:starlight/user-config'
import config from 'virtual:starlight-multiple-sidebar-dropdown/config'

import type { StarlightMultipleSidebarDropdownSharedConfig } from '../libs/config'

import Select from './Select.astro'

interface Props {
  current: StarlightMultipleSidebarDropdownSharedConfig[number]
}

const { current } = Astro.props

const defaultLang = starlightConfig.defaultLocale?.lang || starlightConfig.defaultLocale?.locale || 'en'

function getTranslation(translations: Record<string, string>, link: string, description: string) {
  const defaultTranslation = translations[defaultLang]

  if (!defaultTranslation) {
    throw new AstroError(
      `The ${description} for "${link}" must have a key for the default language "${defaultLang}".`,
      'Update the Starlight config to include a topic label for the default language.',
    )
  }

  let translation = defaultTranslation

  if (Astro.currentLocale) {
    translation = translations[Astro.currentLocale] ?? defaultTranslation
  }

  return translation
}
---

<starlight-multiple-sidebar-dropdown>
  <Select
    icon={current.icon as ComponentProps<typeof Icon>['name']}
    label={typeof current.label === 'string'
      ? current.label
      : getTranslation(current.label, current.link, 'topic label')}
    value={current.link}
    options={config.map((topic) => ({
      value:
        !(topic.type === 'link') && Astro.currentLocale
          ? getRelativeLocaleUrl(Astro.currentLocale, topic.link)
          : topic.link,
      selected: topic.type === 'link' ? false : topic.label === current.label && topic.link === current.link,
      label: typeof topic.label === 'string' ? topic.label : getTranslation(topic.label, topic.link, 'topic label'),
      icon: topic.icon as ComponentProps<typeof Icon>['name'],
    }))}
  />
</starlight-multiple-sidebar-dropdown>

<ul>
  {
    config.map((topic) => {
      const isLinkTopic = topic.type === 'link'
      const isCurrent = isLinkTopic ? false : topic.label === current.label && topic.link === current.link
      const link =
        !isLinkTopic && Astro.currentLocale ? getRelativeLocaleUrl(Astro.currentLocale, topic.link) : topic.link
      const label =
        typeof topic.label === 'string' ? topic.label : getTranslation(topic.label, topic.link, 'topic label')

      return (
        <li>
          <a href={link} class:list={{ 'starlight-multiple-sidebar-dropdown-current': isCurrent }}>
            {topic.icon && (
              <div class="starlight-multiple-sidebar-dropdown-icon">
                <Icon name={topic.icon as ComponentProps<typeof Icon>['name']} />
              </div>
            )}
            <div>
              {label}
              {topic.badge && (
                <Badge
                  class="starlight-multiple-sidebar-dropdown-badge"
                  text={
                    typeof topic.badge.text === 'string'
                      ? topic.badge.text
                      : getTranslation(topic.badge.text, topic.link, 'topic badge text')
                  }
                  variant={topic.badge.variant}
                />
              )}
            </div>
          </a>
        </li>
      )
    })
  }
</ul>

<script>
  class StarlightMultipleSidebarDropdown extends HTMLElement {
    constructor() {
      super()
      const select = this.querySelector('select')
      if (select) {
        select.addEventListener('change', (e) => {
          if (e.currentTarget instanceof HTMLSelectElement) {
            window.location.pathname = e.currentTarget.value
          }
        })
      }
    }
  }
  customElements.define('starlight-multiple-sidebar-dropdown', StarlightMultipleSidebarDropdown)
</script>
